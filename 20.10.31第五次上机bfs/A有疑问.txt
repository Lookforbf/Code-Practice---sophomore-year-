题目描述
有一个n*m的棋盘(1<n,m<=400)，在某个点上有一个马,要求你计算出马到达棋盘上任意一个点最少要走几步
输入
一行四个数据，棋盘的大小和马的坐标

输出
一个n*m的矩阵，同一行元素之间用空格分离。代表马到达某个点最少要走几步。不能到达则输出-1。
样例输入 Copy
3 3 1 1
样例输出 Copy
0 3 2
3 -1 1
2 1 4


///////有疑问，明明和答案差不多，到底哪里超限了？//////////////////////////////





//////////////////////时间超限33分//////////////////////////////////真的耗时很多！！
#include <iostream>
#include <queue>
#include <string.h>
using namespace std;

int Chess[400][400];
int visited[400][400]={};

int step[16]={-2,-1,-2,1,-1,2,1,2,2,1,2,-1,1,-2,-1,-2};
int main()
{
	//memset(Chess,-1,sizeof(Chess));


	int n,m;
	cin>>n>>m;

	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			Chess[i][j]=-1;


	queue <int> qx;
	queue <int> qy;
	queue <int> qs;
	int initx,inity;
	cin>>initx>>inity;
	qx.push(initx-1);qy.push(inity-1);qs.push(0);

	//bfs
	int x,y,s;
	while(!qx.empty())
	{
		x=qx.front();y=qy.front();s=qs.front();
		qx.pop();qy.pop();qs.pop();

		visited[x][y]=1;
		Chess[x][y]=s;
		int newx,newy;
		for(int i=0;i<16;i=i+2)
		{
			newx=x+step[i];newy=y+step[i+1];
			if(visited[newx][newy]||newx<0||newx>=m||newy<0||newy>=n)//超出棋盘,已访问
				continue;

			qx.push(newx);qy.push(newy);qs.push(s+1);
		}

	}

	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			if(j)cout<<" ";
			cout<<Chess[i][j];

		}
		cout<<endl;
	}
	cout<<endl;
	system("pause");
	//cout<<"Hello world!"<<endl;
	return 0;
}



//////////////////////////////////照着改进版，内存超限0分/////////////////////////////////////
#include <iostream>
#include <queue>
//#include <string.h>
using namespace std;

int Chess[400][400];
//int visited[400][400]={};

typedef struct node
{
	int x;
	int y;
	int s;
}Node;

int step[16]={-2,-1,-2,1,-1,2,1,2,2,1,2,-1,1,-2,-1,-2};
int n,m;
bool jud(int newx,int newy)
{
	if(newx<0||newx>=m||newy<0||newy>=n)return false;
	if(Chess[newx][newy]!=-1)return false;
	return true;
}
int main()
{
	cin>>n>>m;

	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			Chess[i][j]=-1;


	queue <Node> q;
	int initx,inity;
	cin>>initx>>inity;
	Node node1={initx-1,inity-1,0};
	q.push(node1);

	//bfs
	//int x,y,s;
	while(!q.empty())
	{
		node1=q.front();
		q.pop();

	//	visited[x][y]=1;
		
		int newx,newy;
		for(int i=0;i<16;i=i+2)
		{
			newx=node1.x+step[i];newy=node1.y+step[i+1];
			if(!jud(newx,newy))//超出棋盘,已访问
				continue;
			int s = node1.s;
			Node node2={newx,newy,s+1};
			q.push(node2);
			Chess[node1.y][node1.x]= node1.s;
		}

	}

	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			if(j)cout<<" ";
			cout<<Chess[i][j];

		}
		cout<<endl;
	}
	cout<<endl;
	system("pause");
	//cout<<"Hello world!"<<endl;
	return 0;
}

///////////////////////////////////网络答案修改，极快，这是为什么？////////////////////////////
#include<cstdio>
#include<queue>
using namespace std;
struct node
{
	int x;
	int y;
	int step;   //记录步数
};
int n, m, x, y;
int map[410][410];
int X[8] = { 1,-1,2,-2,2,-2,1,-1 };   //8个方向
int Y[8] = { 2,2,1,1,-1,-1,-2,-2 };
bool judge(int p, int q)              //判断是否可走
{
	if (p<1 || p>n || q<1 || q>m)
		return false;
	else if (map[p][q] != -1)
		return false;
	else
		return true;
}
void BFS()
{
	queue<node> q;
	node t1 = { x,y,0 };
	q.push(t1);
	map[x][y] = 0;    //不要忘了这个
	while (!q.empty())
	{
		t1 = q.front();
		q.pop();
		for (int i = 0; i < 8; i++)
		{
			if (judge(t1.x + X[i], t1.y + Y[i]))
			{
				node t2 = { t1.x + X[i], t1.y + Y[i],t1.step + 1 };
				q.push(t2);
				map[t2.x][t2.y] = t2.step;
			}
		}
	}
}
int main()
{
	for (int i = 0; i < 410; i++)
		for (int j = 0; j < 410; j++)
			map[i][j] = -1;
	scanf("%d %d %d %d", &n, &m, &x, &y);
	BFS();
	for (int i = 1; i <=n; i++)
	{
		for (int j = 1; j <= m; j++)
			{//注意输出格式
				if(j!=1)printf(" ");
				printf("%d", map[i][j]); } 
			printf("\n");
	}
	system("pause");
	return 0;
}
